@page "/createorder"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@attribute [Authorize]

<style>
    p{
        display:block;
    }
    label{
        display:block;
    }
</style>

@{ if (IsConnected)
    {
        <div class="row">
            <div class="col-md-10 m-md-auto">
                <EditForm Model="tradeOrder" OnValidSubmit="@FormSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="col-md-6 float-md-left">


                        <div class="padding-top">
                            <label>Entry</label>
                            <RadzenNumeric TValue="decimal" Placeholder="Entry" @bind-Value="tradeOrder.Entry" />

                        </div>

                        <div class="padding-top">
                            <label>Stop loss</label>
                            <RadzenNumeric TValue="decimal" Placeholder="Stop loss" @bind-Value="tradeOrder.StopLoss" />

                        </div>

                        <div class="padding-top">
                            <label>Risk</label>
                            <RadzenNumeric TValue="decimal" Placeholder="Risk" @bind-Value="tradeOrder.Risk" />

                        </div>

                        <div class="padding-top">
                            <label>R:R</label>
                            <RadzenNumeric TValue="int" Placeholder="R:R" @bind-Value="tradeOrder.RxR" />

                        </div>

                    </div>
                    <div class="col-md-6 float-md-left">
                        <div class="padding-top">
                            <label>LTP: @LTP</label>
                            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                           @bind-Value="tradeOrder.TradingSymbol" Data=@instruments TextProperty="TradingSymbol"
                                           ValueProperty="TradingSymbol" Change=@((args) => GetTick(args)) Style="height:200px" />
                        </div>

                        <div class="padding-top">
                            <RadzenSelectBar @bind-Value=@tradeOrder.TransactionType TValue="TransactionType">
                                <Items>
                                    <RadzenSelectBarItem Text="BUY" Value="TransactionType.BUY" />
                                    <RadzenSelectBarItem Text="SELL" Value="TransactionType.SELL" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                    </div>

                    <div class="col-md-6 float-md-left padding-top">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Submit" Style="margin-bottom: 20px; width: 150px; margin: auto;" />
                    </div>
                </EditForm>
            </div>

        </div>
    }
            else
            {
                <h3>Connecting...</h3>
            }
}


@code {
    private HubConnection hubConnection;
    private TradeOrder tradeOrder = new TradeOrder();
    private List<TradeInstrument> instruments = new List<TradeInstrument>();
    private decimal LTP { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
            .Build();

        hubConnection.On<List<TradeInstrument>>("ReceiveInstruments", (instruments) =>
        {
            this.instruments = instruments;
            StateHasChanged();
        });

        hubConnection.On<decimal>("ReceiveTick", (tick) =>
        {
            LTP = tick;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await GetInstruments();
    }

    private async void GetTick(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        await hubConnection.SendAsync("GetTick", str);
    }

    private async Task GetInstruments()
    {
        await hubConnection.SendAsync("GetInstruments");
    }

    private async Task FormSubmit(EditContext editContext)
    {
        await hubConnection.SendAsync("StartOrderWork", (TradeOrder)editContext.Model);
        NavigationManager.NavigateTo("/orders");
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
