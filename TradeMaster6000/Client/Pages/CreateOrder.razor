@page "/createorder"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@attribute [Authorize]

<style>
    p {
        display: inline;
    }
</style>

<h3>New Order</h3>

<div id="orderForm">
    <EditForm Model="tradeOrder" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>Entry: </p><InputNumber @bind-Value="tradeOrder.Entry" />
        <br />

        <p>Stoploss: </p><InputNumber @bind-Value="tradeOrder.StopLoss" />
        <br />

        <p>Risk: </p><InputNumber @bind-Value="tradeOrder.Risk" />
        <br />

        <p>Risk:Reward : </p><InputNumber @bind-Value="tradeOrder.RxR" />
        <br />

        <p>Instrument:  LTP: @LTP</p> 
        <InputSelect @oninput="@((e) => GetTick((string)e.Value))" @bind-Value="tradeOrder.TradingSymbol">
            @{
                <option>choose an instrument</option>
                if (instrumentsLoaded)
                {
                    foreach (var instrument in instruments)
                    {
                        <option value="@instrument.TradingSymbol">symbol: @instrument.TradingSymbol - exchange: @instrument.Exchange</option>
                    }
                }
            }
        </InputSelect>
        <br />

        <p>Transaction type: </p><InputSelect @bind-Value="tradeOrder.TransactionType">
            @{
                foreach (var type in Enum.GetValues(typeof(TransactionType)))
                {
                    <option value="@type">@type</option>
                }
            }
        </InputSelect>
        <br />

        <button type="submit">Make Order</button>
    </EditForm>
</div>

@code {
    private bool instrumentsLoaded = false;
    private HubConnection hubConnection;
    private TradeOrder tradeOrder = new TradeOrder();
    private List<TradeInstrument> instruments = new List<TradeInstrument>();
    private decimal LTP { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
            .Build();

        hubConnection.On<List<TradeInstrument>>("ReceiveInstruments", (instruments) =>
        {
            this.instruments = instruments;
            instrumentsLoaded = true;
            StateHasChanged();
        });

        hubConnection.On<decimal>("ReceiveTick", (tick) =>
        {
            LTP = tick;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await GetInstruments();
    }

    private async void GetTick(string symbol)
    {
        await hubConnection.SendAsync("GetTick", symbol);
    }

    private async Task GetInstruments()
    {
        await hubConnection.SendAsync("GetInstruments");
    }

    private async Task HandleValidSubmit(EditContext editContext)
    {

        await hubConnection.SendAsync("StartOrderWork", (TradeOrder)editContext.Model);

        NavigationManager.NavigateTo("/orders");
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
