@page "/orders"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@inject ILogger<Orders> Logger
@implements IAsyncDisposable
@attribute [Authorize]

@{

    if (IsConnected)
    {

        <button @onclick="@NewOrder">New Order</button>

        <br />

        <RadzenDataGrid @ref="ordersGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                        Data="@orders" TItem="TradeOrder">
            <Columns>
                <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="Id" Title="Id" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="help" Click=@(() => GoToOrder(data.Id)) Text="Details" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="TradingSymbol" Title="Trading Symbol" />
                <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="TransactionType" Title="Transaction Type" />
                <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="Entry" Title="Entry" />
                <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="Quantity" Title="Quantity" />
                <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="Status" Title="Status" />
                <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Title="Stop" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Click=@(() => StopTicker(data.Id)) Text="Stop" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    }
    else
    {

        <h1>Connecting...</h1>

    }
}


@code {
    RadzenDataGrid<TradeOrder> ordersGrid;
    private bool showForm = false;
    private HubConnection hubConnection;
    private IList<TradeOrder> orders = new List<TradeOrder>();
    private TradeOrder tradeOrder = new TradeOrder();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
        .Build();

        hubConnection.On<List<TradeOrder>>("ReceiveList", (list) =>
        {
            orders = list;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await GetOrders();
    }
    private void GoToOrder(int id)
        {
        NavigationManager.NavigateTo($"/OrderDetails/{id}");
        }

    private async Task GetOrders()
    {
        await hubConnection.SendAsync("GetOrders");
    }

    private void NewOrder()
    {
        NavigationManager.NavigateTo("/createorder");
    }

    private async Task StopTicker(int id)
    {
        await hubConnection.SendAsync("StopOrderWork", id);
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
