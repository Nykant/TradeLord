@page "/orders"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@attribute [Authorize]

@{

    if (IsConnected)
    {
        <h1>Orders</h1>

        <br />

        <button @onclick="@NewOrder">New Order</button>

        <br />

        <table>
            <tr>
                <th>Id</th>
                <th>Trading Symbol</th>
                <th>Transaction Type</th>
                <th>Entry</th>
                <th>Quantity</th>
                <th>Status</th>
                <th></th>
                <th></th>
            </tr>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.TradingSymbol</td>
                    <td>@order.TransactionType.ToString()</td>
                    <td>@order.Entry</td>
                    <td>@order.Quantity</td>
                    <td>@order.Status</td>
                    <td><a href="/orderdetails/@order.Id">See Logs</a></td>
                    <td><button @onclick="() => StopTicker(order.Id)">Stop</button></td>
                </tr>
            }
        </table>

        <hr />

    }
    else
    {
        
<h1>Connecting...</h1>
        
    }
}


@code {

    private bool showForm = false;
    private HubConnection hubConnection;
    private List<TradeOrder> orders = new List<TradeOrder>();
    private TradeOrder tradeOrder = new TradeOrder();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
            .Build();

        hubConnection.On<List<TradeOrder>>("ReceiveList", (list) =>
        {
            orders = list;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await GetOrders();
    }

    private async Task GetOrders()
    {
        await hubConnection.SendAsync("GetOrders");
    }

    private void NewOrder()
    {
        NavigationManager.NavigateTo("/createorder");
    }

    private async Task StopTicker(int id)
    {
        await hubConnection.SendAsync("StopOrderWork", id);
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
