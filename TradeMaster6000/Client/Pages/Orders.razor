@page "/orders"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@using System.Threading;
@inject NavigationManager NavigationManager
@inject ILogger<Orders> Logger
@implements IAsyncDisposable
@attribute [Authorize(Roles = "Follower")]

@{

    if (IsConnected)
    {
        <hr />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Disabled="@IsUpdateLocked" Click=@(() => Update()) Text="Refresh" />        
        <hr />

        <div class="row">
            <div class="col-xl-12">
                <RadzenDataGrid Style="z-index:0;" @ref="ordersGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                                Data="@orders" TItem="TradeOrder">
                    <Columns>
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="Id" Title="Id" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Click=@(() => GoToOrder(data.Id)) Text="Details" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="TradingSymbol" Title="Trading Symbol" />
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="TransactionType" Title="Transaction Type" />
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="Entry" Title="Entry" />
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="StopLoss" Title="Stop Loss" />
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="Quantity" Title="Quantity" />
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="QuantityFilled" Title="Quantity Filled" />
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Property="Status" Title="Status" />
                        <RadzenDataGridColumn Width="100px" TItem="TradeOrder" Title="Stop" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Click=@(() => StopOrder(data.Id)) Text="Stop" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col-xl-12">
                <RadzenDataGrid Style="z-index:0;" @ref="logsGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                                Data="@logs" TItem="SomeLog">
                    <Columns>
                        <RadzenDataGridColumn Width="300px" TItem="SomeLog" Property="Log" Title="Message" />
                        <RadzenDataGridColumn Width="100px" TItem="SomeLog" Property="LogType" Title="Type" />
                        <RadzenDataGridColumn Width="200px" TItem="SomeLog" Property="Timestamp" Title="Timestamp" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>


    }
    else
    {

        <h3>Connecting...</h3>

    }
    <hr />
}

@code {
    RadzenDataGrid<TradeOrder> ordersGrid;
    RadzenDataGrid<SomeLog> logsGrid;
    private HubConnection hubConnection;
    private IEnumerable<TradeOrder> orders = new List<TradeOrder>();
    private IEnumerable<SomeLog> logs = new List<SomeLog>();
    private bool IsAutoLocked = false;
    private bool IsUpdateLocked = false;
    private string AutoText = "5 random orders";
    private string AutoUltraText = "20 random orders";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
        .Build();

        hubConnection.On<List<TradeOrder>>("ReceiveOrders", (list) =>
        {
            orders = list;
            orders = orders.Reverse();
            StateHasChanged();
        });

        hubConnection.On<List<SomeLog>>("ReceiveRunningLogs", (list) =>
        {
            logs = list;
            logs = logs.Reverse();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await Update();
    }
    private void GoToOrder(int id)
    {
        NavigationManager.NavigateTo($"/OrderDetails/{id}");
    }

    private void NewOrder()
    {
        NavigationManager.NavigateTo("/createorder");
    }

    private async Task Update()
    {
        IsUpdateLocked = true;
        StateHasChanged();
        await hubConnection.SendAsync("Update");
        await Task.Delay(2000);
        IsUpdateLocked = false;
        StateHasChanged();
    }

    private async Task AutoOrders()
    {
        IsAutoLocked = true;
        StateHasChanged();
        await hubConnection.SendAsync("AutoOrders");
        for(int i = 15; i >= 0; i--)
        {
            AutoText = i.ToString();
            AutoUltraText = i.ToString();
            StateHasChanged();
            await Task.Delay(1000);
        }
        IsAutoLocked = false;
        AutoText = "5 random orders";
        AutoUltraText = "20 random orders";
        StateHasChanged();
    }

    private async Task AutoUltraOrders()
    {
        IsAutoLocked = true;
        StateHasChanged();
        await hubConnection.SendAsync("AutoUltraOrders");
        for (int i = 20; i >= 0; i--)
        {
            AutoUltraText = i.ToString();
            AutoText = i.ToString();
            StateHasChanged();
            await Task.Delay(1000);
        }
        IsAutoLocked = true;
        AutoUltraText = "20 random orders";
        AutoText = "5 random orders";
        StateHasChanged();
    }

    private async Task StopOrder(int id)
    {
        await hubConnection.SendAsync("StopOrderWork", id);
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
