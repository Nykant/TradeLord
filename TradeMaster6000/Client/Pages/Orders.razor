@page "/orders"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@attribute [Authorize]

<h1>Orders</h1>

<br />

<button @onclick="@NewOrder">New Order</button>

<br />

<table>
    <tr>
        <th>Id</th>
        <th>Trading Symbol</th>
        <th>Transaction Type</th>
        <th>Entry</th>
        <th></th>
    </tr>
    @foreach (var order in orders)
    {
        <tr>
            <td>@order.Id</td>
            <td>@order.Instrument.TradingSymbol</td>
            <td>@order.TransactionType.ToString()</td>
            <td>@order.Entry</td>
            <td><button @onclick="() => StopTicker(order.Id)">stop</button></td>
        </tr>
    }
</table>

<hr />

<ul id="logsList">
    @foreach (var log in logs)
    {
        <li>@log</li>
    }
</ul>

<hr />

<ul id="orderDataList">
    @foreach (var data in orderData)
    {
        <li>status message: @data.StatusMessage - status: @data.Status</li>
    }
</ul>

@code {

    private bool showForm = false;
    private HubConnection hubConnection;
    private List<TradeOrder> orders = new List<TradeOrder>();
    private TradeOrder tradeOrder = new TradeOrder();
    private List<string> logs = new List<string>();
    private List<Order> orderData = new List<Order>();


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orders"))
            .Build();

        hubConnection.On<List<string>>("ReceiveLogs", (logs) =>
        {
            this.logs = logs;
            StateHasChanged();
        });

        hubConnection.On<string>("ReceiveLog", (log) =>
        {
            logs.Add($"log: {log}");
            StateHasChanged();
        });

        hubConnection.On<List<TradeOrder>>("ReceiveList", (list) =>
        {
            orders = list;
            StateHasChanged();
        });

        hubConnection.On<List<Order>>("ReceiveOrderData", (list) =>
        {
            orderData = list;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await GetOrders();
        await GetLogList();
        await GetOrderData();

    }

    private void NewOrder()
    {
        NavigationManager.NavigateTo("/createorder");
    }

    private async Task GetOrders()
    {
        await hubConnection.SendAsync("GetOrders");
    }

    private async Task GetOrderData()
    {
        await hubConnection.SendAsync("GetOrderData");
    }
    private async Task GetLogList()
    {
        await hubConnection.SendAsync("GetLogList");
    }

    private async Task StopTicker(int id)
    {
        await hubConnection.SendAsync("StopOrderWork", id);
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
