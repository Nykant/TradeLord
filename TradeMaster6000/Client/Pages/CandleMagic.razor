@page "/candlemagic"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@attribute [Authorize]

@{

    if (IsConnected)
    {
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@StartCandleMagic" Text="Start magic" />
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@StopCandleMagic" Text="Stop magic" />

        <hr />

        <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                       @bind-Value="tradingSymbol" Data=@instruments TextProperty="TradingSymbol"
                       ValueProperty="TradingSymbol" Change=@((args) => GetCandles(args)) Style="height:200px" />

        <hr />

        <RadzenDataGrid @ref="candlesGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                        Data="@candles" TItem="Candle">
            <Columns>
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="InstrumentSymbol" Title="Instrument Symbol" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Open" Title="Open" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="High" Title="High" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Low" Title="Low" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Close" Title="Close" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Timestamp" Title="Timestamp" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="TicksCount" Title="Ticks Count" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Kill" Title="Kill" />
            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        <h3>Connecting...</h3>
    }
}

@code {
    private HubConnection hubConnection;
    RadzenDataGrid<Candle> candlesGrid;
    private List<Candle> candles = new List<Candle>();
    private List<TradeInstrument> instruments = new List<TradeInstrument>();
    private string tradingSymbol = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
        .Build();

        hubConnection.On<List<Candle>>("ReceiveCandles", (list) =>
        {
            candles = list;
            candles.Reverse();
            StateHasChanged();
        });

        hubConnection.On<List<TradeInstrument>>("ReceiveInstruments", (instruments) =>
        {
            this.instruments = instruments;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await GetInstruments();
    }

    public async Task GetCandles(object args)
    {
        await hubConnection.SendAsync("GetCandles", (string)args);
    }

    private async Task GetInstruments()
    {
        await hubConnection.SendAsync("GetInstruments");
    }

    private async Task StartCandleMagic()
    {
        await hubConnection.SendAsync("StartCandleMagic");
    }

    private async Task StopCandleMagic()
    {
        await hubConnection.SendAsync("StopCandleMagic");
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
