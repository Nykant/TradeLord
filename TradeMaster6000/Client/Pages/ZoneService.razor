@page "/zoneservice"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@*@attribute [Authorize]*@

@{

    if (IsConnected)
    {
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@StartZoneService" Text="Start zone service" />

        <hr />

        <RadzenDataGrid @ref="zonesGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                        Data="@zones" TItem="Zone">
            <Columns>
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="InstrumentSymbol" Title="Instrument Symbol" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="Top" Title="Top" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="Bottom" Title="Bottom" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="From" Title="From" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="To" Title="To" />
            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        <h3>Connecting...</h3>
    }
}

@code {
    private HubConnection hubConnection;
    RadzenDataGrid<Zone> zonesGrid;
    private IEnumerable<Zone> zones = new List<Zone>();
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
        .Build();

        hubConnection.On<List<Zone>>("ReceiveZones", (list) =>
        {
            zones = list;
            zones.Reverse();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await GetZones();
    }

    public async Task GetZones()
    {
        await hubConnection.SendAsync("GetZones");
    }

    private async Task StartZoneService()
    {
        await hubConnection.SendAsync("StartZoneService");
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}