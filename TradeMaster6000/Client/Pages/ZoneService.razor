@page "/zoneservice"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@attribute [Authorize]

@{
    if (IsConnected)
    {
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@StartZoneService" Text="Start zone service" />

        <hr />

        <RadzenButton ButtonStyle="ButtonStyle.Light" Disabled="@IsUpdateLocked" Click=@(() => Update()) Text="Refresh" />

        <hr />

        <RadzenDataGrid Style="z-index:0;" @ref="zonesGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                        Data="@zones" TItem="Zone">
            <Columns>
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="InstrumentSymbol" Title="Instrument Symbol" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="Top" Title="Top" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="Bottom" Title="Bottom" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="ZoneType" Title="Zone type" />
                @*<RadzenDataGridColumn Width="100px" TItem="Zone" Property="Tested" Title="Tested" />*@
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="SupplyDemand" Title="Supply Or Demand" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="From" Title="From" />
                <RadzenDataGridColumn Width="100px" TItem="Zone" Property="To" Title="To" />
            </Columns>
        </RadzenDataGrid>

        @*<hr />

            <RadzenDataGrid Style="z-index:0;" @ref="candlesGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                            Data="@candles" TItem="Candle">
                <Columns>
                    <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Open" Title="Open" />
                    <RadzenDataGridColumn Width="100px" TItem="Candle" Property="High" Title="High" />
                    <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Low" Title="Low" />
                    <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Close" Title="Close" />
                    <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Timestamp" Title="Timestamp" />
                    <RadzenDataGridColumn Width="100px" TItem="Candle" Property="TicksCount" Title="Ticks Count" />
                    <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Kill" Title="Kill" />
                </Columns>
            </RadzenDataGrid>*@
    }
    else
    {
        <h3>Connecting...</h3>
    }

    <hr />
}

@code {
    private HubConnection hubConnection;
    RadzenDataGrid<Zone> zonesGrid;
    //RadzenDataGrid<Candle> candlesGrid;
    private List<Zone> zones = new List<Zone>();
    private bool IsUpdateLocked = false;
    //private List<Candle> candles = new List<Candle>();
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
        .Build();

        hubConnection.On<List<Zone>>("ReceiveZones", (list) =>
        {
            zones = list;
            zones.Reverse();
            StateHasChanged();
        });

        //hubConnection.On<List<Candle>>("ReceiveZoneCandles", (list) =>
        //{
        //    candles = list;
        //    candles.Reverse();
        //    StateHasChanged();
        //});

        await hubConnection.StartAsync();

        await GetZones();
        //await GetZoneCandles();
    }

    public async Task GetZones()
    {
        await hubConnection.SendAsync("GetZones");
    }

    public async Task GetZoneCandles()
    {
        await hubConnection.SendAsync("GetZoneCandles");
    }

    private async Task Update()
    {
        IsUpdateLocked = true;
        StateHasChanged();
        await hubConnection.SendAsync("GetZones");
        await Task.Delay(2000);
        IsUpdateLocked = false;
        StateHasChanged();
    }

    private async Task StartZoneService()
    {
        await hubConnection.SendAsync("StartZoneService");
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}