@page "/zoneservice"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@attribute [Authorize]

@{

    if (IsConnected)
    {
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@StartZoneService" Text="Start zone service" />

        <hr />

        @*<RadzenDataGrid @ref="candlesGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                        Data="@candles" TItem="Candle">
            <Columns>
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="InstrumentSymbol" Title="Instrument Symbol" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Open" Title="Open" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="High" Title="High" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Low" Title="Low" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Close" Title="Close" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="From" Title="From" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="To" Title="To" />
                <RadzenDataGridColumn Width="100px" TItem="Candle" Property="Kill" Title="Kill" />
            </Columns>
        </RadzenDataGrid>*@
    }
    else
    {
        <h3>Connecting...</h3>
    }
}

@code {
    private HubConnection hubConnection;
    //RadzenDataGrid<Candle> candlesGrid;
    //private IEnumerable<Candle> candles = new List<Candle>();
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
        .Build();

        //hubConnection.On<List<Candle>>("ReceiveCandles", (list) =>
        //{
        //    candles = list;
        //    candles.Reverse();
        //    StateHasChanged();
        //});

        await hubConnection.StartAsync();

        //await GetCandles();
    }

    //public async Task GetCandles()
    //{
    //    await hubConnection.SendAsync("GetCandles");
    //}

    private async Task StartZoneService()
    {
        await hubConnection.SendAsync("StartZoneService");
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}