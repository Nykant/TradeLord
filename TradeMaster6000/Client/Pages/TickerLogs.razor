@page "/tickerlogs"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using TradeMaster6000.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@attribute [Authorize]

@{ if (IsConnected)
    {
        <div class="row">
            <div class="col-lg-12">
                <RadzenDataGrid @ref="logsGrid" AllowFiltering="false" AllowPaging="true" PageSize="20" AllowSorting="false"
                                Data="@logs" TItem="SomeLog">
                    <Columns>
                        <RadzenDataGridColumn Width="300px" TItem="SomeLog" Property="Log" Title="Log" />
                        <RadzenDataGridColumn Width="100px" TItem="SomeLog" Property="LogType" Title="Type" />
                        <RadzenDataGridColumn Width="200px" TItem="SomeLog" Property="Timestamp" Title="Timestamp" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    }
    else
    {
        <h3>Connecting...</h3>
    }
}

@code {
    RadzenDataGrid<SomeLog> logsGrid;
    HubConnection hubConnection;
    IEnumerable<SomeLog> logs = new List<SomeLog>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
        .Build();

        hubConnection.On<List<SomeLog>>("ReceiveTickerLogs", (list) =>
        {
            logs = list;
            logs = logs.Reverse();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await GetTickerLogs();
    }

    private async Task GetTickerLogs()
    {
        await hubConnection.SendAsync("GetTickerLogs");
    }

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}